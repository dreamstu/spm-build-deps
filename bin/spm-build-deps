#!/usr/bin/env node

var path = require('path');
var commander = require('commander');
var color = require('colorful').color;
var fs = require('fs');
require("shelljs/global");
//var exec = require("child_process").exec;

var DEFAULT_SRC_DIR = "sea-modules";
var DEFAULT_DIST_DIR = "sea-dist-modules";


var project_dir = process.cwd();
var pkg_file = project_dir + '/package.json';
if(!fs.existsSync(pkg_file)){
  console.error("Not found package.json");
  return;
}

var pkg = require(pkg_file);
var spmrc = require("spmrc");
var mkdirp = require("mkdirp");


commander
  .version(pkg.version)
  .usage('[locale]')
  .option('-v, --verbose', 'Show more infomation.')
  .option('-d, --dist', 'Specify build output dist directory.')
  .option('-f, --force', 'Force to process the task.');

commander.on('--help', function() {
  console.log();
  console.log('  Change locale directory in ~/.spm/spmrc');
  console.log();
  console.log(color.magenta('    [gettext]'));
  console.log('    path = ./locale/{locale}/LC_MESSAGES.js');
  console.log();
});
commander.parse(process.argv);

var src_dir = commander.src || DEFAULT_SRC_DIR;
var dist_dir = commander.dist || DEFAULT_DIST_DIR;
var dependencies = [];

if (!pkg || !pkg.spm){
  console.error("No package or spm infomation found.");
  return;
}

function find_deps(deps){
  if(!deps){return;}

  for(var depsName in deps){
    if(!deps.hasOwnProperty(depsName)){continue;}

    var depsVersion = deps[depsName];

    var pkg_file = project_dir + "/" + src_dir + "/" + depsName + "/" +
        depsVersion + "/package.json";

    if(!fs.existsSync(pkg_file)){
      continue;
    }

    var pkg = require(pkg_file);

    if(!pkg || !pkg.spm){
      continue;
    }

    dependencies.push({
      name: depsName,
      version: depsVersion
    });

    find_deps(pkg.spm.dependencies);
    find_deps(pkg.spm.devDependencies);
    find_deps(pkg.spm.engines);

  }
}

find_deps(pkg.spm.dependencies);
find_deps(pkg.spm.devDependencies);
find_deps(pkg.spm.engines);

var cache_deps = {};
dependencies = dependencies.filter(function(deps){
  var key = deps.name + "@" + deps.value;
  if(cache_deps.hasOwnProperty(key)){
    return false;
  }
  cache_deps[key] = key;
  return true;
});


function build(module_dir, dist_dir){
  if(!fs.existsSync(module_dir)){
    console.log(color.red("No found dir: " + module_dir));
    return;
  }

  fs.stat(module_dir, function(err, stats){
    if(err){
      return console.log(color.red("Read module dir [" + module_dir + "] error: ", err));
    }
    if(stats.isDirectory()){
      //console.error("Found dir: " + module_dir);
      cd(module_dir);
      exec("spm build -O " + dist_dir, function(error, stdout, stderr){

        if(error){
          console.log("");
        }else{
        }

      });
    }
  })
}


for(var i=0,l=dependencies.length; i<l; i++){
  var depsName = dependencies[i].name;
  var depsVersion = dependencies[i].version;
  build(
    project_dir + "/" + src_dir +
      "/" + depsName + "/" + depsVersion,
    project_dir + "/" + dist_dir
  );
}


// vim:ft=javascript
