#!/usr/bin/env node

var path = require('path');
var commander = require('commander');
var color = require('colorful').color;
var fs = require('fs');
var exeq = require('exeq');

var DEFAULT_SRC_DIR = "sea-modules";
var DEFAULT_DEST_DIR = "dist";

var pkg = require("../package.json");
var spmrc = require("spmrc");

commander
  .version(pkg.version)
  .usage('[locale]')
  .option('-v, --verbose', 'Show more infomation.')
  .option('-s, --src [source]', 'Specify build input source directory.')
  .option('-d, --dest [destination]', 'Specify build output destination directory.')
  .option('-f, --force', 'Force to process the task.');

commander.on('--help', function() {
  console.log();
  console.log('  Change locale directory in ~/.spm/spmrc');
  console.log();
  console.log(color.magenta('    [deps-build]'));
  console.log('    default-destination = cmd-modules');
  console.log();
});

commander.parse(process.argv);


var project_dir = process.cwd();
var pkg_file = project_dir + '/package.json';
if(!fs.existsSync(pkg_file)){
  console.error("Not found package.json");
  return;
}
var module_pkg = require(pkg_file);

var src_dir = commander.src || spmrc.get("deps.src") || DEFAULT_SRC_DIR;
var dest_dir = commander.dest || spmrc.get("deps.dest") || DEFAULT_DEST_DIR;
var dependencies = [];
var engines = [];

if (!module_pkg || !module_pkg.spm){
  console.error("No package or spm infomation found.");
  return;
}

// @param {Object} deps, key:value pairs define in package.json
// @param {Array} dependencies, list of collect dependencies.
function each_deps(deps, dependencies){
  if (!deps) {return;}
  var version;

  for (var name in deps){
    if (!deps.hasOwnProperty(name)){ continue; }
    version = deps[name];

    if(!commander.force &&
        fs.existsSync(
          project_dir + "/" + dest_dir + "/" + name + "/" + version
        )
      ) {
      continue;
    }

    dependencies.push(name + "/" + version);

    var deps_pkg_file = project_dir + "/" + src_dir + "/" +
      name + "/" + version + "/package.json";

    if (fs.existsSync(deps_pkg_file)){
      find_deps(require(deps_pkg_file));
    }
  }
}

// @param {Object} pkg, package.json
// @param {Boolean} b_dev, find devDependencies or not.
function find_deps(pkg, b_dev){
  if(!pkg || !pkg.spm){return;}

  each_deps(pkg.spm.dependencies, dependencies);

  // Note: deps's devDeps need not build.
  if (b_dev){
    each_deps(pkg.spm.devDependencies, dependencies);
  }

  each_deps(pkg.spm.engines, engines);

}

find_deps(module_pkg, true);


function uniq(item, index, self){
  return self.indexOf(item) === index;
}
dependencies = dependencies.filter(uniq);
engines = engines.filter(uniq);


function buildCommand(module_dir, dest_dir){
  if(!fs.existsSync(module_dir)){
    console.log(color.red("No found dir: " + module_dir));
    return;
  }
  try {
    var stats = fs.statSync(module_dir);

    if(stats.isDirectory()){
      return ["cd " + module_dir,
        "spm build" + (commander.verbose ? " -v" : "") + " -O " + dest_dir];
    }

  } catch (err) {
    console.log(color.red("Read module dir [" + module_dir + "] error: ", err));
  }
}


var cmds = [];

dependencies.forEach(function(deps){

  cmds = cmds.concat(
    buildCommand(
      project_dir + "/" + src_dir + "/" + deps,
      project_dir + "/" + dest_dir
    )
  );

});

engines.forEach(function(deps){

  cmds.push("mkdir -p " +
      project_dir+"/"+dest_dir + "/" + deps + "/");

  cmds.push("cp -r " +
      project_dir + "/" + src_dir + "/" + deps + "/dist/ " +
      project_dir+"/"+dest_dir + "/" + deps + "/");

});


var builded = 0;
exeq(cmds).on('each', function(command){
  if (command.indexOf("spm build ") === 0 ||
      command.indexOf("cp -r") === 0 ) {

    builded++;
  }
}).on('done', function(count) {
  console.log(color.green('  ' + builded + ' dependencies build finished!'));
});
